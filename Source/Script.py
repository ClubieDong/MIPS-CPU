import openpyxl as xl
import os


def GetSignals(sheet, col):
    signals = []
    i = 2
    while True:
        name = sheet.cell(i, col).value
        width = sheet.cell(i, col + 1).value
        if name is None or width is None:
            break
        signals.append((name, width))
        i += 1
    return signals


def FormatWidth(width):
    if width == 1:
        return "      "
    return f"[{width - 1:>2}:0]"


def PipelineRegsConverter(stage1, stage2, signals):
    lines = []
    lines.append(f"// This file is automatically generated by Script.py.")
    lines.append(f"")
    lines.append(f"module {stage1}_{stage2}(")
    lines.append(f"    input         clk,")
    lines.append(f"    input         rst,")
    for i in signals:
        lines.append(f"    input  {FormatWidth(i[1])} {stage1}_{i[0]},")
    for i in signals:
        lines.append(f"    output {FormatWidth(i[1])} {stage2}_{i[0]},")
    lines[-1] = lines[-1][:-1]
    lines.append(f");")
    for i in signals:
        lines.append(f"    reg    {FormatWidth(i[1])} {i[0]}Reg;")
    lines.append(f"")
    lines.append(f"    always @ (posedge clk)")
    lines.append(f"    begin")
    lines.append(f"        if (rst)")
    lines.append(f"        begin")
    for i in signals:
        lines.append(f"            {i[0]}Reg <= 32'bX;")
    lines.append(f"        end")
    lines.append(f"        else")
    lines.append(f"        begin")
    for i in signals:
        lines.append(f"            {i[0]}Reg <= {stage1}_{i[0]};")
    lines.append(f"        end")
    lines.append(f"    end")
    lines.append(f"")
    for i in signals:
        lines.append(f"    assign {stage2}_{i[0]} = {i[0]}Reg;")
    lines.append(f"")
    lines.append(f"endmodule")
    for i in range(len(lines)):
        lines[i] += "\n"
    with open(f"Source/Registers/PipelineRegisters/{stage1}_{stage2}.v", "w") as f:
        f.writelines(lines)


file = xl.load_workbook("真值表.xlsx")
sheet_piplineRegs = file["PipelineRegs"]
PipelineRegsConverter("IF", "ID", GetSignals(sheet_piplineRegs, 1))
PipelineRegsConverter("ID", "EX", GetSignals(sheet_piplineRegs, 4))
PipelineRegsConverter("EX", "MEM", GetSignals(sheet_piplineRegs, 7))
PipelineRegsConverter("MEM", "WB", GetSignals(sheet_piplineRegs, 10))
