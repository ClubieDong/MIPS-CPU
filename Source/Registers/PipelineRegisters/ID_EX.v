// This file is automatically generated by Script.py.

module ID_EX(
    input         clk,
    input         rst,
    input         flush,
    input         stall,
    input  [31:0] ID_pc4,
    input  [31:0] ID_instr,
    input  [31:0] ID_regDout1,
    input  [31:0] ID_regDout2,
    input  [31:0] ID_immEx,
    input  [ 4:0] ID_regAddr3,
    input  [ 3:0] ID_aluOp,
    input         ID_aluDin1Src,
    input         ID_aluDin2Src,
    input  [ 1:0] ID_mdOp,
    input         ID_memWrite,
    input         ID_memRead,
    input  [ 1:0] ID_memSize,
    input         ID_memSign,
    input         ID_regWrite,
    input  [ 2:0] ID_regDinSrc,
    input         ID_cp0Write,
    input  [ 1:0] ID_hlWrite,
    input         ID_hlDinHiSrc,
    input         ID_hlDinLoSrc,
    output [31:0] EX_pc4,
    output [31:0] EX_instr,
    output [31:0] EX_regDout1,
    output [31:0] EX_regDout2,
    output [31:0] EX_immEx,
    output [ 4:0] EX_regAddr3,
    output [ 3:0] EX_aluOp,
    output        EX_aluDin1Src,
    output        EX_aluDin2Src,
    output [ 1:0] EX_mdOp,
    output        EX_memWrite,
    output        EX_memRead,
    output [ 1:0] EX_memSize,
    output        EX_memSign,
    output        EX_regWrite,
    output [ 2:0] EX_regDinSrc,
    output        EX_cp0Write,
    output [ 1:0] EX_hlWrite,
    output        EX_hlDinHiSrc,
    output        EX_hlDinLoSrc
);
    reg    [31:0] pc4Reg;
    reg    [31:0] instrReg;
    reg    [31:0] regDout1Reg;
    reg    [31:0] regDout2Reg;
    reg    [31:0] immExReg;
    reg    [ 4:0] regAddr3Reg;
    reg    [ 3:0] aluOpReg;
    reg           aluDin1SrcReg;
    reg           aluDin2SrcReg;
    reg    [ 1:0] mdOpReg;
    reg           memWriteReg;
    reg           memReadReg;
    reg    [ 1:0] memSizeReg;
    reg           memSignReg;
    reg           regWriteReg;
    reg    [ 2:0] regDinSrcReg;
    reg           cp0WriteReg;
    reg    [ 1:0] hlWriteReg;
    reg           hlDinHiSrcReg;
    reg           hlDinLoSrcReg;

    always @ (posedge clk)
    begin
        if (rst)
            pc4Reg <= 0;
        if (rst || flush)
        begin
            instrReg <= 0;
            regDout1Reg <= 0;
            regDout2Reg <= 0;
            immExReg <= 0;
            regAddr3Reg <= 0;
            aluOpReg <= 0;
            aluDin1SrcReg <= 0;
            aluDin2SrcReg <= 0;
            mdOpReg <= 0;
            memWriteReg <= 0;
            memReadReg <= 0;
            memSizeReg <= 0;
            memSignReg <= 0;
            regWriteReg <= 0;
            regDinSrcReg <= 0;
            cp0WriteReg <= 0;
            hlWriteReg <= 0;
            hlDinHiSrcReg <= 0;
            hlDinLoSrcReg <= 0;
        end
        else if (!stall)
        begin
            pc4Reg <= ID_pc4;
            instrReg <= ID_instr;
            regDout1Reg <= ID_regDout1;
            regDout2Reg <= ID_regDout2;
            immExReg <= ID_immEx;
            regAddr3Reg <= ID_regAddr3;
            aluOpReg <= ID_aluOp;
            aluDin1SrcReg <= ID_aluDin1Src;
            aluDin2SrcReg <= ID_aluDin2Src;
            mdOpReg <= ID_mdOp;
            memWriteReg <= ID_memWrite;
            memReadReg <= ID_memRead;
            memSizeReg <= ID_memSize;
            memSignReg <= ID_memSign;
            regWriteReg <= ID_regWrite;
            regDinSrcReg <= ID_regDinSrc;
            cp0WriteReg <= ID_cp0Write;
            hlWriteReg <= ID_hlWrite;
            hlDinHiSrcReg <= ID_hlDinHiSrc;
            hlDinLoSrcReg <= ID_hlDinLoSrc;
        end
    end

    assign EX_pc4 = pc4Reg;
    assign EX_instr = instrReg;
    assign EX_regDout1 = regDout1Reg;
    assign EX_regDout2 = regDout2Reg;
    assign EX_immEx = immExReg;
    assign EX_regAddr3 = regAddr3Reg;
    assign EX_aluOp = aluOpReg;
    assign EX_aluDin1Src = aluDin1SrcReg;
    assign EX_aluDin2Src = aluDin2SrcReg;
    assign EX_mdOp = mdOpReg;
    assign EX_memWrite = memWriteReg;
    assign EX_memRead = memReadReg;
    assign EX_memSize = memSizeReg;
    assign EX_memSign = memSignReg;
    assign EX_regWrite = regWriteReg;
    assign EX_regDinSrc = regDinSrcReg;
    assign EX_cp0Write = cp0WriteReg;
    assign EX_hlWrite = hlWriteReg;
    assign EX_hlDinHiSrc = hlDinHiSrcReg;
    assign EX_hlDinLoSrc = hlDinLoSrcReg;

endmodule
