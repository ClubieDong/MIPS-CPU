// This file is automatically generated by Script.py.

module EX_MEM(
    input         clk,
    input         rst,
    input  [31:0] EX_pc4,
    input  [31:0] EX_instr,
    input         EX_memWrite,
    input         EX_memRead,
    input  [ 1:0] EX_memSize,
    input         EX_memSign,
    input         EX_regWrite,
    input  [ 1:0] EX_regAddr3Src,
    input  [ 2:0] EX_regDinSrc,
    input  [ 1:0] EX_hlWrite,
    input         EX_hlDinHiSrc,
    input         EX_hlDinLoSrc,
    input         EX_takeEret,
    output [31:0] MEM_pc4,
    output [31:0] MEM_instr,
    output        MEM_memWrite,
    output        MEM_memRead,
    output [ 1:0] MEM_memSize,
    output        MEM_memSign,
    output        MEM_regWrite,
    output [ 1:0] MEM_regAddr3Src,
    output [ 2:0] MEM_regDinSrc,
    output [ 1:0] MEM_hlWrite,
    output        MEM_hlDinHiSrc,
    output        MEM_hlDinLoSrc,
    output        MEM_takeEret
);
    reg    [31:0] pc4Reg;
    reg    [31:0] instrReg;
    reg           memWriteReg;
    reg           memReadReg;
    reg    [ 1:0] memSizeReg;
    reg           memSignReg;
    reg           regWriteReg;
    reg    [ 1:0] regAddr3SrcReg;
    reg    [ 2:0] regDinSrcReg;
    reg    [ 1:0] hlWriteReg;
    reg           hlDinHiSrcReg;
    reg           hlDinLoSrcReg;
    reg           takeEretReg;

    always @ (posedge clk)
    begin
        if (rst)
        begin
            pc4Reg <= 32'bX;
            instrReg <= 32'bX;
            memWriteReg <= 32'bX;
            memReadReg <= 32'bX;
            memSizeReg <= 32'bX;
            memSignReg <= 32'bX;
            regWriteReg <= 32'bX;
            regAddr3SrcReg <= 32'bX;
            regDinSrcReg <= 32'bX;
            hlWriteReg <= 32'bX;
            hlDinHiSrcReg <= 32'bX;
            hlDinLoSrcReg <= 32'bX;
            takeEretReg <= 32'bX;
        end
        else
        begin
            pc4Reg <= EX_pc4;
            instrReg <= EX_instr;
            memWriteReg <= EX_memWrite;
            memReadReg <= EX_memRead;
            memSizeReg <= EX_memSize;
            memSignReg <= EX_memSign;
            regWriteReg <= EX_regWrite;
            regAddr3SrcReg <= EX_regAddr3Src;
            regDinSrcReg <= EX_regDinSrc;
            hlWriteReg <= EX_hlWrite;
            hlDinHiSrcReg <= EX_hlDinHiSrc;
            hlDinLoSrcReg <= EX_hlDinLoSrc;
            takeEretReg <= EX_takeEret;
        end
    end

    assign MEM_pc4 = pc4Reg;
    assign MEM_instr = instrReg;
    assign MEM_memWrite = memWriteReg;
    assign MEM_memRead = memReadReg;
    assign MEM_memSize = memSizeReg;
    assign MEM_memSign = memSignReg;
    assign MEM_regWrite = regWriteReg;
    assign MEM_regAddr3Src = regAddr3SrcReg;
    assign MEM_regDinSrc = regDinSrcReg;
    assign MEM_hlWrite = hlWriteReg;
    assign MEM_hlDinHiSrc = hlDinHiSrcReg;
    assign MEM_hlDinLoSrc = hlDinLoSrcReg;
    assign MEM_takeEret = takeEretReg;

endmodule
