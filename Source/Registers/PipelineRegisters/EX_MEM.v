// This file is automatically generated by Script.py.

module EX_MEM(
    input         clk,
    input         rst,
    input         flush,
    input         stall,
    input  [31:0] EX_pc4,
    input  [31:0] EX_instr,
    input  [31:0] EX_aluDout,
    input  [31:0] EX_regDout1,
    input  [31:0] EX_regDout2,
    input  [31:0] EX_mdDoutHi,
    input  [31:0] EX_mdDoutLo,
    input  [ 4:0] EX_regAddr3,
    input         EX_imExcept,
    input  [ 1:0] EX_ctrlExcept,
    input         EX_aluExcept,
    input         EX_delaySlot,
    input         EX_memWrite,
    input         EX_memRead,
    input  [ 1:0] EX_memSize,
    input         EX_memSign,
    input         EX_regWrite,
    input  [ 2:0] EX_regDinSrc,
    input         EX_cp0Write,
    input  [ 1:0] EX_hlWrite,
    input         EX_hlDinHiSrc,
    input         EX_hlDinLoSrc,
    input         EX_takeEret,
    output [31:0] MEM_pc4,
    output [31:0] MEM_instr,
    output [31:0] MEM_aluDout,
    output [31:0] MEM_regDout1,
    output [31:0] MEM_regDout2,
    output [31:0] MEM_mdDoutHi,
    output [31:0] MEM_mdDoutLo,
    output [ 4:0] MEM_regAddr3,
    output        MEM_imExcept,
    output [ 1:0] MEM_ctrlExcept,
    output        MEM_aluExcept,
    output        MEM_delaySlot,
    output        MEM_memWrite,
    output        MEM_memRead,
    output [ 1:0] MEM_memSize,
    output        MEM_memSign,
    output        MEM_regWrite,
    output [ 2:0] MEM_regDinSrc,
    output        MEM_cp0Write,
    output [ 1:0] MEM_hlWrite,
    output        MEM_hlDinHiSrc,
    output        MEM_hlDinLoSrc,
    output        MEM_takeEret
);
    reg    [31:0] pc4Reg;
    reg    [31:0] instrReg;
    reg    [31:0] aluDoutReg;
    reg    [31:0] regDout1Reg;
    reg    [31:0] regDout2Reg;
    reg    [31:0] mdDoutHiReg;
    reg    [31:0] mdDoutLoReg;
    reg    [ 4:0] regAddr3Reg;
    reg           imExceptReg;
    reg    [ 1:0] ctrlExceptReg;
    reg           aluExceptReg;
    reg           delaySlotReg;
    reg           memWriteReg;
    reg           memReadReg;
    reg    [ 1:0] memSizeReg;
    reg           memSignReg;
    reg           regWriteReg;
    reg    [ 2:0] regDinSrcReg;
    reg           cp0WriteReg;
    reg    [ 1:0] hlWriteReg;
    reg           hlDinHiSrcReg;
    reg           hlDinLoSrcReg;
    reg           takeEretReg;

    always @ (posedge clk)
    begin
        if (rst)
            pc4Reg <= 0;
        if (rst || flush)
        begin
            instrReg <= 0;
            aluDoutReg <= 0;
            regDout1Reg <= 0;
            regDout2Reg <= 0;
            mdDoutHiReg <= 0;
            mdDoutLoReg <= 0;
            regAddr3Reg <= 0;
            imExceptReg <= 0;
            ctrlExceptReg <= 0;
            aluExceptReg <= 0;
            delaySlotReg <= 0;
            memWriteReg <= 0;
            memReadReg <= 0;
            memSizeReg <= 0;
            memSignReg <= 0;
            regWriteReg <= 0;
            regDinSrcReg <= 0;
            cp0WriteReg <= 0;
            hlWriteReg <= 0;
            hlDinHiSrcReg <= 0;
            hlDinLoSrcReg <= 0;
            takeEretReg <= 0;
        end
        else if (!stall)
        begin
            pc4Reg <= EX_pc4;
            instrReg <= EX_instr;
            aluDoutReg <= EX_aluDout;
            regDout1Reg <= EX_regDout1;
            regDout2Reg <= EX_regDout2;
            mdDoutHiReg <= EX_mdDoutHi;
            mdDoutLoReg <= EX_mdDoutLo;
            regAddr3Reg <= EX_regAddr3;
            imExceptReg <= EX_imExcept;
            ctrlExceptReg <= EX_ctrlExcept;
            aluExceptReg <= EX_aluExcept;
            delaySlotReg <= EX_delaySlot;
            memWriteReg <= EX_memWrite;
            memReadReg <= EX_memRead;
            memSizeReg <= EX_memSize;
            memSignReg <= EX_memSign;
            regWriteReg <= EX_regWrite;
            regDinSrcReg <= EX_regDinSrc;
            cp0WriteReg <= EX_cp0Write;
            hlWriteReg <= EX_hlWrite;
            hlDinHiSrcReg <= EX_hlDinHiSrc;
            hlDinLoSrcReg <= EX_hlDinLoSrc;
            takeEretReg <= EX_takeEret;
        end
    end

    assign MEM_pc4 = pc4Reg;
    assign MEM_instr = instrReg;
    assign MEM_aluDout = aluDoutReg;
    assign MEM_regDout1 = regDout1Reg;
    assign MEM_regDout2 = regDout2Reg;
    assign MEM_mdDoutHi = mdDoutHiReg;
    assign MEM_mdDoutLo = mdDoutLoReg;
    assign MEM_regAddr3 = regAddr3Reg;
    assign MEM_imExcept = imExceptReg;
    assign MEM_ctrlExcept = ctrlExceptReg;
    assign MEM_aluExcept = aluExceptReg;
    assign MEM_delaySlot = delaySlotReg;
    assign MEM_memWrite = memWriteReg;
    assign MEM_memRead = memReadReg;
    assign MEM_memSize = memSizeReg;
    assign MEM_memSign = memSignReg;
    assign MEM_regWrite = regWriteReg;
    assign MEM_regDinSrc = regDinSrcReg;
    assign MEM_cp0Write = cp0WriteReg;
    assign MEM_hlWrite = hlWriteReg;
    assign MEM_hlDinHiSrc = hlDinHiSrcReg;
    assign MEM_hlDinLoSrc = hlDinLoSrcReg;
    assign MEM_takeEret = takeEretReg;

endmodule
