// This file is automatically generated by Script.py.

module MEM_WB(
    input         clk,
    input         rst,
    input         flush,
    input         stall,
    input  [31:0] MEM_pc4,
    input  [31:0] MEM_instr,
    input  [31:0] MEM_aluDout,
    input  [31:0] MEM_regDout1,
    input  [31:0] MEM_regDout2,
    input  [31:0] MEM_mdDoutHi,
    input  [31:0] MEM_mdDoutLo,
    input  [31:0] MEM_hlDoutHi,
    input  [31:0] MEM_hlDoutLo,
    input  [31:0] MEM_dmDout,
    input  [31:0] MEM_cp0Dout,
    input  [ 4:0] MEM_regAddr3,
    input         MEM_regWrite,
    input  [ 2:0] MEM_regDinSrc,
    input         MEM_cp0Write,
    input  [ 1:0] MEM_hlWrite,
    input         MEM_hlDinHiSrc,
    input         MEM_hlDinLoSrc,
    output [31:0] WB_pc4,
    output [31:0] WB_instr,
    output [31:0] WB_aluDout,
    output [31:0] WB_regDout1,
    output [31:0] WB_regDout2,
    output [31:0] WB_mdDoutHi,
    output [31:0] WB_mdDoutLo,
    output [31:0] WB_hlDoutHi,
    output [31:0] WB_hlDoutLo,
    output [31:0] WB_dmDout,
    output [31:0] WB_cp0Dout,
    output [ 4:0] WB_regAddr3,
    output        WB_regWrite,
    output [ 2:0] WB_regDinSrc,
    output        WB_cp0Write,
    output [ 1:0] WB_hlWrite,
    output        WB_hlDinHiSrc,
    output        WB_hlDinLoSrc
);
    reg    [31:0] pc4Reg;
    reg    [31:0] instrReg;
    reg    [31:0] aluDoutReg;
    reg    [31:0] regDout1Reg;
    reg    [31:0] regDout2Reg;
    reg    [31:0] mdDoutHiReg;
    reg    [31:0] mdDoutLoReg;
    reg    [31:0] hlDoutHiReg;
    reg    [31:0] hlDoutLoReg;
    reg    [31:0] dmDoutReg;
    reg    [31:0] cp0DoutReg;
    reg    [ 4:0] regAddr3Reg;
    reg           regWriteReg;
    reg    [ 2:0] regDinSrcReg;
    reg           cp0WriteReg;
    reg    [ 1:0] hlWriteReg;
    reg           hlDinHiSrcReg;
    reg           hlDinLoSrcReg;

    always @ (posedge clk)
    begin
        if (rst || flush)
        begin
            pc4Reg <= 0;
            instrReg <= 0;
            aluDoutReg <= 0;
            regDout1Reg <= 0;
            regDout2Reg <= 0;
            mdDoutHiReg <= 0;
            mdDoutLoReg <= 0;
            hlDoutHiReg <= 0;
            hlDoutLoReg <= 0;
            dmDoutReg <= 0;
            cp0DoutReg <= 0;
            regAddr3Reg <= 0;
            regWriteReg <= 0;
            regDinSrcReg <= 0;
            cp0WriteReg <= 0;
            hlWriteReg <= 0;
            hlDinHiSrcReg <= 0;
            hlDinLoSrcReg <= 0;
        end
        else if (!stall)
        begin
            pc4Reg <= MEM_pc4;
            instrReg <= MEM_instr;
            aluDoutReg <= MEM_aluDout;
            regDout1Reg <= MEM_regDout1;
            regDout2Reg <= MEM_regDout2;
            mdDoutHiReg <= MEM_mdDoutHi;
            mdDoutLoReg <= MEM_mdDoutLo;
            hlDoutHiReg <= MEM_hlDoutHi;
            hlDoutLoReg <= MEM_hlDoutLo;
            dmDoutReg <= MEM_dmDout;
            cp0DoutReg <= MEM_cp0Dout;
            regAddr3Reg <= MEM_regAddr3;
            regWriteReg <= MEM_regWrite;
            regDinSrcReg <= MEM_regDinSrc;
            cp0WriteReg <= MEM_cp0Write;
            hlWriteReg <= MEM_hlWrite;
            hlDinHiSrcReg <= MEM_hlDinHiSrc;
            hlDinLoSrcReg <= MEM_hlDinLoSrc;
        end
    end

    assign WB_pc4 = pc4Reg;
    assign WB_instr = instrReg;
    assign WB_aluDout = aluDoutReg;
    assign WB_regDout1 = regDout1Reg;
    assign WB_regDout2 = regDout2Reg;
    assign WB_mdDoutHi = mdDoutHiReg;
    assign WB_mdDoutLo = mdDoutLoReg;
    assign WB_hlDoutHi = hlDoutHiReg;
    assign WB_hlDoutLo = hlDoutLoReg;
    assign WB_dmDout = dmDoutReg;
    assign WB_cp0Dout = cp0DoutReg;
    assign WB_regAddr3 = regAddr3Reg;
    assign WB_regWrite = regWriteReg;
    assign WB_regDinSrc = regDinSrcReg;
    assign WB_cp0Write = cp0WriteReg;
    assign WB_hlWrite = hlWriteReg;
    assign WB_hlDinHiSrc = hlDinHiSrcReg;
    assign WB_hlDinLoSrc = hlDinLoSrcReg;

endmodule
